require 'dotenv'
Dotenv.load('.env.default')

default_platform(:ios)

platform :ios do
  lane :create_and_unlock_keychain do
    keychain_name = "fastlane_temp.keychain-db"
    keychain_password = "fastlane"

    # Create the keychain
    sh "security create-keychain -p #{keychain_password} #{keychain_name}"
    
    # Set the keychain as default and unlock it
    sh "security unlock-keychain -p #{keychain_password} #{keychain_name}"
    sh "security list-keychains -s #{keychain_name}"
    sh "security default-keychain -s #{keychain_name}"
    sh "security set-keychain-settings -t 1200 -u #{keychain_name}"
    
    # Import certificate if needed
    sh "echo \"#{ENV['DISTRIBUTION_P12_FILE']}\" | base64 --decode > /tmp/distribution.p12"
    sh "security import /tmp/distribution.p12 -k #{keychain_name} -P #{ENV['P12_PASSWORD']} -T /usr/bin/codesign"
  end

  lane :load_asc_api_token do
    api_key = app_store_connect_api_key(
      key_id: ENV["ASC_KEY_ID"],
      issuer_id: ENV["ASC_ISSUER_ID"],
      key_content: ENV["ASC_KEY_P8"],
      is_key_content_base64: true,
      in_house: false
    )
    Actions.lane_context[SharedValues::APP_STORE_CONNECT_API_KEY] = api_key
  end

  before_all do
    load_asc_api_token
    create_and_unlock_keychain
  end

  desc "Fetch provisioning profiles and certificates from the repository"
  lane :fetch_certificates do
    match(
      type: "appstore",
      readonly: true,
      git_url: ENV['FASTLANE_MATCH_GIT_URL'],
      keychain_name: "fastlane_temp.keychain-db",
      keychain_password: ENV['MATCH_KEYCHAIN_PASSWORD']
    )
  end

  desc "Release a new build to TestFlight"
  lane :release_beta do
    commit = last_git_commit
    puts "*** Starting iOS release for commit(#{commit[:abbreviated_commit_hash]}) ***"

    api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]

    sync_code_signing(
      api_key: api_key,
      type: "appstore",
      git_url: ENV['FASTLANE_MATCH_GIT_URL'],
      app_identifier: "com.terateck.games.savyminds",
      team_id: "65X7U7HQLZ",
      keychain_password: ENV['MATCH_KEYCHAIN_PASSWORD'],
      clone_branch_directly: true
    )

    build_number = bump_build_number()
    version_name = get_version_name()

    # Capture the original directory
    original_dir = Dir.pwd

    begin
      # Change to the Flutter project directory
      Dir.chdir("../..") do
        puts "*** Build flutter iOS release for version #{version_name}+#{build_number} ***"
        sh("flutter build ipa --release --build-number=#{build_number} --build-name=#{version_name}")
      end
    rescue => e
      UI.error("Flutter build failed: #{e.message}")
      raise e
    ensure
      # Change back to the original directory
      Dir.chdir(original_dir)
    end

    puts "*** Build and sign iOS app release ***"
    build_app(
      skip_build_archive: true,
      archive_path: "../build/ios/archive/Runner.xcarchive"
    )

    puts "*** Upload app to TestFlight ***"
    upload_to_testflight(
      api_key: api_key,
      username: ENV['APPLE_ID'],
      team_id: ENV['ITC_TEAM_ID']
    )
  end

  def bump_build_number()
    latest_build_number = latest_testflight_build_number(
      initial_build_number: 0,
      app_identifier: "com.terateck.games.savyminds"
    )
    return (latest_build_number + 1)
  end

  def get_version_name()
    version_name = lane_context[SharedValues::LATEST_TESTFLIGHT_VERSION]

    if version_name.nil? || version_name.empty?
      puts "*** Version name is empty, add version 1.0.0 ***"
      version_name = "1.0.0"
    end

    return version_name
  end
end
